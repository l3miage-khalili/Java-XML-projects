<?xml version="1.0"?>
<!--
Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
Click nbfs://nbhost/SystemFileSystem/Templates/XML/XmlSchema.xsd to edit this template
-->

<xs:schema version="1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://www.ujf-grenoble.fr/l3miage/medical"
           xmlns="http://www.ujf-grenoble.fr/l3miage/medical"
           elementFormDefault="qualified">
    
    <!-- ici declaration d'un element racine de nom cabinet et de type Cabinet  -->
           
    <xs:element name="cabinet" type="Cabinet"/>
    
    
    <!-- ici definition du type complexe Cabinet de l'element racine cabinet et
        declaration du nom et type de ses sous-elements suivants :
       (nom_elt : type_elt)
        nom : string
        adresse : Adresse
        infirmiers : Infirmiers
        patients : Patients
    -->
    
    <xs:complexType name="Cabinet">
        <xs:sequence>
            <xs:element name="nom" type="xs:string"/>
            <xs:element name="adresse" type="Adresse"/>
            <xs:element name="infirmiers" type="Infirmiers"/>
            <xs:element name="patients" type="Patients"/>
        </xs:sequence> 
    </xs:complexType>
    
    <!-- ici definition du type complexe Adresse de l'element adresse et
        declaration du nom et type de ses sous-elements suivants :
       (nom_elt : type_elt)
        numéro : int (facultatif)
        étage : int (facultatif)
        rue : string
        ville : string
        codePostal : CodePostal
    -->
    
    <xs:complexType name="Adresse">
        <xs:sequence>
            <xs:element name="étage" type="xs:int" minOccurs="0" maxOccurs="1"/>
            <xs:element name="numéro" type="xs:int" minOccurs="0" maxOccurs="1"/>
            <xs:element name="rue" type="xs:string"/>
            <xs:element name="ville" type="xs:string"/>
            <xs:element name="codePostal" type="CodePostal"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- ici definition du type simple CodePostal de l'element codePostal 
        Un codePostal est un entier écrit sur 5 chiffres
    -->
    
    <xs:simpleType name="CodePostal">
        <xs:restriction base="xs:int">
            <xs:pattern value="\d{5}"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- ici definition du type complexe Infirmiers de l'element infirmiers et 
        declaration du nom et type de ses sous-elements suivants :
        (nom_elt : type_elt)
        infirmier : Infirmier (unbounded)
    -->
    
    <xs:complexType name="Infirmiers">
        <xs:sequence>
            <xs:element name="infirmier" type="Infirmier" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- ici definition du type complexe Infirmier de l'element infirmier et 
        declaration du nom et type de ses sous-elements suivants :
        (nom_elt : type_elt)
        nom : string
        prénom : string
        photo : Photo
        attribut id : int (obligatoire)
    -->
    
    <xs:complexType name="Infirmier">
        <xs:sequence>
            <xs:element name="nom" type="xs:string"/>
            <xs:element name="prénom" type="xs:string"/>
            <xs:element name="photo" type="Photo"/>
        </xs:sequence>
        <xs:attribute name="id" type="xs:int" use="required"/>
    </xs:complexType>
    
    <!-- ici definition du type simple Photo de l'element photo 
        Une photo a le format suivant : nom_Photo.extension
    -->
    
    <xs:simpleType name="Photo">
        <xs:restriction base="xs:string">
            <xs:pattern value="[A-Za-z]{1,}.[A-Za-z]{2,4}"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- ici definition du type complexe Patients de l'element patients et 
        declaration du nom et type de ses sous-elements suivants :
        (nom_elt : type_elt)
        patient : Patient (unbounded)
    -->
    
    <xs:complexType name="Patients">
        <xs:sequence>
            <xs:element name="patient" type="Patient" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- ici definition du type complexe Patient de l'element patient et 
        declaration du nom et type de ses sous-elements suivants :
        (nom_elt : type_elt)
        nom : string
        prénom : string
        sexe : Sexe
        naissance : date
        numéro : Numéro (facultatif)
        adresse : Adresse
        visite : Visite
    -->
    
    <xs:complexType name="Patient">
        <xs:sequence>
            <xs:element name="nom" type="xs:string"/>
            <xs:element name="prénom" type="xs:string"/>
            <xs:element name="sexe" type="Sexe"/>
            <xs:element name="naissance" type="xs:date"/>
            <xs:element name="numéro" type="Numéro" minOccurs="0" maxOccurs="1"/>
            <xs:element name="adresse" type="Adresse"/>
            <xs:element name="visite" type="Visite"/>
        </xs:sequence>
    </xs:complexType>
    
    <!-- ici definition du type simple Sexe de l'element sexe
        un sexe est soit M soit F
    -->
    
    <xs:simpleType name="Sexe">
        <xs:restriction base="xs:string">
            <xs:pattern value="M"/>
            <xs:pattern value="F"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- ici definition du type simple Numéro de l'element numéro determinant
        le numéro de sécurité sociale d'un patient
        Ce numéro est composé de 15 chiffres
    -->
    
    <xs:simpleType name="Numéro">
        <xs:restriction base="xs:string">
            <xs:pattern value="\d{15}"/>
        </xs:restriction>
    </xs:simpleType>
    
    <!-- ici definition du type complexe Visite de l'element visite et 
        declaration du nom et type de ses sous-elements suivants :
        (nom_elt : type_elt)
        acte : Acte
        attribut date : date (obligatoire)
        attribut intervenant : int
    -->
    
    <xs:complexType name="Visite">
        <xs:sequence>
            <xs:element name="acte" type="Acte"/>
        </xs:sequence>
        <xs:attribute name="date" type="xs:date" use="required"/>
        <xs:attribute name="intervenant" type="xs:int"/>
    </xs:complexType>
    
    
    <!-- ici definition du type complexe Acte de l'element acte et 
        declaration du nom et type de son attribut obligatoire 
        id de type int
    -->
    
    <xs:complexType name="Acte">
        <xs:attribute name="id" type="xs:int" use="required"/>
    </xs:complexType>
    
    
    
    
</xs:schema>
